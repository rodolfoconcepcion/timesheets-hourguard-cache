<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SourceControl.SVN">
<Description><![CDATA[
This is an example source control class. It is not intended for use on a real system, but as a code sample
showing some useful techniques.<p>
In this example each item in Cache is also stored as an XML file in the filesystem and these
external files are assumed to be version controlled by a tool. So every time you load an item this will
read the latest version of the item from the file, and when you save this item it will be
written back to the XML file.<p>
In addition, if you check an item out then an entry will be added to a global in Cache to show
that this item is checked out, and when you check it in the global entry will be removed.
Typically the checkout/checkin would call the external source control package, but setting
the global shows the general principle.<p>]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.SourceControl.Base</Super>
<TimeCreated>64085,30756.603469</TimeCreated>

<Method name="OnBeforeLoad">
<Description>
Before loading any item we check to see if we have a later version in the XML
file and if so this is loaded. Note the use of the timestamps in ^MySourceControl
is just a performance optimzation to avoid loading the file where it is not needed.
We have the '0' subscript which tracks the modified time on the file to avoid loading
it when the file has not changed, and the '1' subscript tracks the timestamp on the item in
Cache so we do not save it if it is up to date.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set filename=..ExternalName(InternalName)
 if filename="" quit $$$OK

 #; If no file then skip the import
 if '##class(%File).Exists(filename) write !,"File ",filename," not found, skipping import" quit $$$OK

 #; If the timestamp on the file is the same as the last time it was imported then there is nothing to do as it is already up to date
 if ##class(%File).GetFileDateModified(filename)=$get(^MySourceControl(0,InternalName)) quit $$$OK

 #; Call the function to do the load
 set sc=$system.OBJ.Load(filename,"-l-d")
 if $$$ISOK(sc) {
 write !,"Imported '",InternalName,"' from file '",filename,"'"
 set ^MySourceControl(0,InternalName)=##class(%File).GetFileDateModified(filename)
 set ^MySourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 } else {
 do $system.Status.DecomposeStatus(sc,.errors,"d")
 }
 quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
After saving an item in Cache we write this out to the XML file so the external source control
tool can see what changes we have made.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set filename=..ExternalName(InternalName)
 if filename="" quit $$$OK

 #; If the timestamp of the item in Cache has not changed then there is no point in saving it again
 if ##class(%RoutineMgr).TS(InternalName)=$get(^MySourceControl(1,InternalName)) quit $$$OK

 #; Call the export function
 set sc=$system.OBJ.Export(InternalName,filename,"-d")
 if $$$ISOK(sc) {
 write !,"Exported '",InternalName,"' to file '",filename,"'"
 set ^MySourceControl(0,InternalName)=##class(%File).GetFileDateModified(filename)
 set ^MySourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 } else {
 do $system.Status.DecomposeStatus(sc,,"d")
 }
 quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description><![CDATA[
Compilation can change a class as it can update the storage information. As such we need
to check if the item has changed and save it out again if it has, this is already done
by <method>OnAfterSave</method> so just call this.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<Method name="GetStatus">
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set Editable=0,IsCheckedOut=0,UserCheckedOut=""
 set filename=..ExternalName(InternalName)
 set IsInSourceControl=(filename'=""&&(##class(%File).Exists(filename)))
 if 'IsInSourceControl set Editable=1 quit $$$OK

 if $data(^MySourceControl(2,InternalName)) set IsCheckedOut=1,UserCheckedOut=$listget(^MySourceControl(2,InternalName))
 if IsCheckedOut,UserCheckedOut=..Username set Editable=1
 quit ..OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[ quit 1
]]></Implementation>
</Method>

<Method name="ExternalName">
<Description><![CDATA[
This assumes that your directory structure starts with a directory for the type of each item
and then has subdirectories for each '.' in the item name with a base directory added to the
start. So 'User.MyClass.cls' maps to '<base>cls/User/MyClass.xml'. You can pick whatever structure
you prefer. This example is designed for Windows filenames, you will need to modify it to support
Unix or VMS filenames.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set name=$piece(InternalName,".",1,*-1),ext=$zconvert($piece(InternalName,".",*),"l")
	if name="" quit ""
	if $extract(name)="/"||($extract(name)="\") set name=$extract(name,2,*)
	if $$$isWINDOWS {
		quit $get(^MySourceControl("base"),"C:\sources\")_ext_"\"_$translate(name,"./","\\")_".xml"
	} else {
		quit $get(^MySourceControl("base"),"/sources/")_ext_"/"_$translate(name,".\","//")_".xml"
	}
]]></Implementation>
</Method>

<Method name="CheckIn">
<Description>
Check this routine/class/csp file into source control.</Description>
<FormalSpec>InternalName:%String,Description:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; See if we have it checked out
 if '$data(^MySourceControl(2,InternalName)) quit $$$ERROR($$$GeneralError,"You can not check in an item you have not got checked out")
 if $listget(^MySourceControl(2,InternalName))'=..Username quit $$$ERROR($$$GeneralError,"User '"_$listget(^MySourceControl(2,InternalName))_"' has this item checked out")

 #; Write out the latest version
 set sc=..OnAfterSave(InternalName)
 if $$$ISERR(sc) quit sc

 #; Remove the global to show that we have checked it in
 kill ^MySourceControl(2,InternalName)
 quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckOut">
<Description>
Check this routine/class/csp file out of source control.</Description>
<FormalSpec>InternalName:%String,Description:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; See if anyone has it checked out
 if $data(^MySourceControl(2,InternalName)) {
	 if $listget(^MySourceControl(2,InternalName))=..Username {
		 quit $$$ERROR($$$GeneralError,"You already have item '"_InternalName_"' checked out")
	 } else {
		 quit $$$ERROR($$$GeneralError,"Another user '"_$listget(^MySourceControl(2,InternalName))_"' has item '"_InternalName_"' checked out")
	 }
 }

 #; Make sure we have the latest version of this item loaded
 set sc=..OnBeforeLoad(InternalName)
 if $$$ISERR(sc) quit sc

 #; Mark the global to show that we have it checked out.
 set ^MySourceControl(2,InternalName)=$listbuild(..Username,Description)
 quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
