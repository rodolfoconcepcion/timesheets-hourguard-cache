<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ClassExplorer.Router">
<Description>
REST interface for ClassExplorer</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63648,30450.187229</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
   <Route Url="/" Method="GET" Call="Index"/>
   <Route Url="/index" Method="GET" Call="Index"/>
   <Route Url="/css/CacheClassExplorer.css" Method="GET" Call="GetCss"/>
   <Route Url="/js/CacheClassExplorer.js" Method="GET" Call="GetJs"/>
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/GetClassTree" Method="GET" Call="GetClassTree"/>
   <Route Url="/GetAllNamespacesList" Method="GET" Call="GetAllNamespacesList"/>
   <Route Url="/GetPackageView" Method="GET" Call="GetPackageView"/>
   <Route Url="/GetArbitraryView" Method="GET" Call="GetArbitraryView"/>
   <Route Url="/GetMethod" Method="GET" Call="GetMethod"/>
   <Route Url="/SaveView" Method="POST" Call="SaveView"/>
   <Route Url="/ResetView" Method="GET" Call="ResetView"/>
</Routes>
]]></Data>
</XData>

<Method name="GetClassTree">
<Description>
Method returns whole class tree visible in the current namespace.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(ClassExplorer.ClassView).getClassTree(%request.Get("namespace")).%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetArbitraryView">
<Description>
Returns classTree by given class name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set classList = %request.Get("list")
    set classData = ##class(ClassView).getArbitraryView(classList, %request.Get("namespace"), %request.Get("level"))
    do classData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="SaveView">
<Description>
Saves the view preferences</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set name = %request.Get("name")
    set content = %request.Content.Read($$$MaxStringLength) // ~ 7mb
    set ^ClassExplorer("savedView", name) = content
    write "{""OK"":true}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="ResetView">
<Description>
Saves the view preferences</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set name = %request.Get("name")
    kill ^ClassExplorer("savedView", name)
    write "{""OK"":true}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetPackageView">
<Description>
Returns all package class trees by given package name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set packageName = %request.Get("name")
    set classData = ##class(ClassView).getPackageView(packageName, %request.Get("namespace"))
    do classData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetAllNamespacesList">
<Description>
Return the list of all namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(ClassExplorer.ClassView).getAllNamespacesList().%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetMethod">
<Description>
Returns method description and code</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set className = %request.Get("className")
    set methodName = %request.Get("methodName")
    set methodData = ##class(ClassView).getMethod(className, methodName, %request.Get("namespace"))
    do methodData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetCss">
<Description>
Method returns user application CSS.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/css"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
   
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("CSS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetJs">
<Description>
Method returns user application JavaScript.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/javascript"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
    
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("JS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="Index">
<Description>
Method returns user application HTML.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    do %response.SetHeader("Last-Modified", $$$CompileTime)
        
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("HTML")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="Http304">
<Description>
Issue an "304 Not Modified" status</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.Status="304 Not Modified"
    Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
