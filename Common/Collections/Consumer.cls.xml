<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Common.Collections.Consumer">
<Description><![CDATA[
<PRE>
TD AMERITRADE CONFIDENTIAL CONTROLLED.  DO NOT COPY OR DISTRIBUTE FURTHER.  
Â© 2015 Think Tech, Inc.  All rights reserved.  

=======================================================================
Description: Serializable consumer function which accepts an input to an executable string.

=======================================================================
                     REVISIONS AND MODIFICATIONS
-----------|---------|-------------------------------------------------
03/02/2015   sno246    Genesis
=======================================================================
</PRE> ]]></Description>
<IncludeCode>%occErrors,Exceptions</IncludeCode>
<Super>Lib.Function.IConsumer,Common.Serialization.Serializable</Super>
<TimeCreated>63588,51996.598068</TimeCreated>

<Property name="Action">
<Type>%List</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>action:%String="",actionList:%List=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ..Action=actionList_$lb(action)
	q ..validateAction()
]]></Implementation>
</Method>

<Method name="accept">
<Description>
Executes the Action list items.</Description>
<FormalSpec>input:%String="?"</FormalSpec>
<Implementation><![CDATA[
	f i=1:1:$ll(..Action) {
		x $replace($lg(..Action,i),"?",""""_input_"""")
	}
]]></Implementation>
</Method>

<Method name="andThen">
<Description>
Returns a new consumer with the new action added to the current Action list.</Description>
<FormalSpec>after:%String</FormalSpec>
<ReturnType>Lib.Function.IConsumer</ReturnType>
<Implementation><![CDATA[	q ##class(Common.Collections.Consumer).%New(after,..Action)
]]></Implementation>
</Method>

<Method name="validateAction">
<Description>
Validates the Action list as executable statements.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	f i=1:1:$ll(..Action) {
		s cmd=" "_$replace($lg(..Action,i),"?","input")
		q:'##class(%Library.Routine).CheckSyntax(cmd,.err)
	}
	q $s($g(err(1))="":$System.Status.OK(),1:$System.Status.Error($$$GeneralError,$g(err(1))_"~"_cmd))
]]></Implementation>
</Method>
</Class>
</Export>
