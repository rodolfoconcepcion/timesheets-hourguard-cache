<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Common.Collections.Function">
<Description><![CDATA[
<PRE>
TD AMERITRADE CONFIDENTIAL CONTROLLED.  DO NOT COPY OR DISTRIBUTE FURTHER.  
Â© 2015 Think Tech, Inc.  All rights reserved.  

=======================================================================
Description: Serializable function which applies an input to an executable string.

=======================================================================
                     REVISIONS AND MODIFICATIONS
-----------|---------|-------------------------------------------------
03/02/2015   sno246    Genesis
=======================================================================
</PRE> ]]></Description>
<IncludeCode>%occErrors</IncludeCode>
<Super>Lib.Function.IFunction,Common.Serialization.Serializable</Super>
<TimeCreated>63588,52926.715061</TimeCreated>

<Property name="Map">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>map:%String="?"</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ..Map=$s(map="":"?",1:map)
	q ..validateMap()
]]></Implementation>
</Method>

<Method name="andThen">
<Description>
Returns a new Function that composes this Map with a new map (newMap(thisMap(?))).</Description>
<FormalSpec>after:%String="?"</FormalSpec>
<ReturnType>Lib.Function.IFunction</ReturnType>
<Implementation><![CDATA[	q ##class(Common.Collections.Function).%New($replace(after,"?","("_..Map_")"))
]]></Implementation>
</Method>

<Method name="apply">
<Description>
Applies an input to this Map.</Description>
<FormalSpec>input:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $xecute("(input) q "_$replace(..Map,"?","input"),input)
]]></Implementation>
</Method>

<Method name="compose">
<Description>
Returns a new Function that composes a new map with this Map (thisMap(newMap(?))).</Description>
<FormalSpec>before:%String="?"</FormalSpec>
<ReturnType>Lib.Function.IFunction</ReturnType>
<Implementation><![CDATA[	q ##class(Common.Collections.Function).%New($replace(..Map,"?","("_before_")"))
]]></Implementation>
</Method>

<Method name="identity">
<Description>
Returns a new Function that maps an input to itself.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>Lib.Function.IFunction</ReturnType>
<Implementation><![CDATA[	q ##class(Common.Collections.Function).%New()
]]></Implementation>
</Method>

<Method name="validateMap">
<Description>
Validates the Map as an executable statement.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s cmd=" q "_$replace(..Map,"?","input")
	q $s(##class(%Library.Routine).CheckSyntax(cmd,.err):$System.Status.OK(),1:$System.Status.Error($$$GeneralError,$g(err(1))_"~"_cmd))
]]></Implementation>
</Method>
</Class>
</Export>
